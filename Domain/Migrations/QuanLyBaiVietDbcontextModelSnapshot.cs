// <auto-generated />
using System;
using Domain.Database.AppDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(QuanLyBaiVietDbcontext))]
    partial class QuanLyBaiVietDbcontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppDomain.Object.ApprovalHistory", b =>
                {
                    b.Property<int>("ApprovalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApprovalID"));

                    b.Property<int>("ArticleID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ApprovalID");

                    b.HasIndex("ArticleID");

                    b.HasIndex("UserID");

                    b.ToTable("ApprovalHistory", (string)null);
                });

            modelBuilder.Entity("AppDomain.Object.Articles", b =>
                {
                    b.Property<int>("ArcticleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArcticleID"));

                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Download_path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailFe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Preview_Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Royalty")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersUserID")
                        .HasColumnType("int");

                    b.Property<int>("WritingPhaseID")
                        .HasColumnType("int");

                    b.HasKey("ArcticleID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("UsersUserID");

                    b.HasIndex("WritingPhaseID");

                    b.ToTable("Articles", (string)null);
                });

            modelBuilder.Entity("AppDomain.Object.Articles_Hashtag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArcticleID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HashtagID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ArcticleID");

                    b.HasIndex("HashtagID");

                    b.ToTable("Articles_Hashtag", (string)null);
                });

            modelBuilder.Entity("AppDomain.Object.Categories", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Royalty")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("AppDomain.Object.Facility", b =>
                {
                    b.Property<int>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacilityId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FacilityId");

                    b.ToTable("Facility", (string)null);
                });

            modelBuilder.Entity("AppDomain.Object.Hashtag", b =>
                {
                    b.Property<int>("HashtagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HashtagID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HashtagID");

                    b.ToTable("Hashtag", (string)null);
                });

            modelBuilder.Entity("AppDomain.Object.RegistrationPeriods", b =>
                {
                    b.Property<int>("RegistrationPeriodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegistrationPeriodID"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Is_Opening_registration")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegistrationStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("User_Training_Facility_Code")
                        .HasColumnType("int");

                    b.HasKey("RegistrationPeriodID");

                    b.HasIndex("User_Training_Facility_Code");

                    b.ToTable("RegistrationPeriods", (string)null);
                });

            modelBuilder.Entity("AppDomain.Object.User_RegistrationPeriods", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RegistrationPeriods")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("WritingPhaseID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("UserID");

                    b.HasIndex("WritingPhaseID");

                    b.ToTable("User_RegistrationPeriods", (string)null);
                });

            modelBuilder.Entity("AppDomain.Object.WritingPhases", b =>
                {
                    b.Property<int>("WritingPhaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WritingPhaseID"));

                    b.Property<int>("AmountArticles")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Is_Opening_registration")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegistrationPeriodID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("WritingPhaseID");

                    b.HasIndex("RegistrationPeriodID");

                    b.ToTable("WritingPhases", (string)null);
                });

            modelBuilder.Entity("Domain.Data.Entities.Users", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Createdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailFE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modifiedate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("UStatus")
                        .HasColumnType("int");

                    b.Property<int>("User_Training_Facility_Code")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("User_Training_Facility_Code");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("AppDomain.Object.ApprovalHistory", b =>
                {
                    b.HasOne("AppDomain.Object.Articles", "Articles")
                        .WithMany("Approvals")
                        .HasForeignKey("ArticleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Data.Entities.Users", "Users")
                        .WithMany("ApprovalHistory")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Articles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AppDomain.Object.Articles", b =>
                {
                    b.HasOne("AppDomain.Object.Categories", "Categories")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Data.Entities.Users", null)
                        .WithMany("Articles")
                        .HasForeignKey("UsersUserID");

                    b.HasOne("AppDomain.Object.WritingPhases", "WritingPhases")
                        .WithMany("Articles")
                        .HasForeignKey("WritingPhaseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Categories");

                    b.Navigation("WritingPhases");
                });

            modelBuilder.Entity("AppDomain.Object.Articles_Hashtag", b =>
                {
                    b.HasOne("AppDomain.Object.Articles", "Articles")
                        .WithMany("Articles_Hashtags")
                        .HasForeignKey("ArcticleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppDomain.Object.Hashtag", "Hashtag")
                        .WithMany("Articles_Hashtags")
                        .HasForeignKey("HashtagID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Articles");

                    b.Navigation("Hashtag");
                });

            modelBuilder.Entity("AppDomain.Object.RegistrationPeriods", b =>
                {
                    b.HasOne("AppDomain.Object.Facility", "Facility")
                        .WithMany("Regions")
                        .HasForeignKey("User_Training_Facility_Code")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("AppDomain.Object.User_RegistrationPeriods", b =>
                {
                    b.HasOne("AppDomain.Object.Categories", "Categories")
                        .WithMany("User_Registrations")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Data.Entities.Users", "Users")
                        .WithMany("User_RegistrationPeriods")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppDomain.Object.WritingPhases", "WritingPhases")
                        .WithMany("UserRegistrationPeriods")
                        .HasForeignKey("WritingPhaseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Categories");

                    b.Navigation("Users");

                    b.Navigation("WritingPhases");
                });

            modelBuilder.Entity("AppDomain.Object.WritingPhases", b =>
                {
                    b.HasOne("AppDomain.Object.RegistrationPeriods", "RegistrationPeriods")
                        .WithMany("WritingPhases")
                        .HasForeignKey("RegistrationPeriodID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RegistrationPeriods");
                });

            modelBuilder.Entity("Domain.Data.Entities.Users", b =>
                {
                    b.HasOne("AppDomain.Object.Facility", "Facility")
                        .WithMany("Users")
                        .HasForeignKey("User_Training_Facility_Code")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("AppDomain.Object.Articles", b =>
                {
                    b.Navigation("Approvals");

                    b.Navigation("Articles_Hashtags");
                });

            modelBuilder.Entity("AppDomain.Object.Categories", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("User_Registrations");
                });

            modelBuilder.Entity("AppDomain.Object.Facility", b =>
                {
                    b.Navigation("Regions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AppDomain.Object.Hashtag", b =>
                {
                    b.Navigation("Articles_Hashtags");
                });

            modelBuilder.Entity("AppDomain.Object.RegistrationPeriods", b =>
                {
                    b.Navigation("WritingPhases");
                });

            modelBuilder.Entity("AppDomain.Object.WritingPhases", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("UserRegistrationPeriods");
                });

            modelBuilder.Entity("Domain.Data.Entities.Users", b =>
                {
                    b.Navigation("ApprovalHistory");

                    b.Navigation("Articles");

                    b.Navigation("User_RegistrationPeriods");
                });
#pragma warning restore 612, 618
        }
    }
}
